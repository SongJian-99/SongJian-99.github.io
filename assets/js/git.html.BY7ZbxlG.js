import{_ as t}from"./plugin-vue_export-helper.DlAUqK2U.js";import{c as i,a as o,o as l}from"./app.C4VKiIAB.js";const a={};function n(r,e){return l(),i("div",null,e[0]||(e[0]=[o('<h2 id="git-常用命令" tabindex="-1"><a class="header-anchor" href="#git-常用命令"><span>Git 常用命令</span></a></h2><ul><li><code>git add</code>：代码提交到本地暂存区</li><li><code>git commit -m &#39;&#39;</code>：代码提交到本地仓库</li><li><code>git push</code>：代码提交到远程仓库</li><li><code>git pull</code>：拉取远程仓库代码到本地</li><li><code>git clone</code> ：克隆远程仓库代码到本地</li><li><code>git branch -m master main</code>：本地代码分支重命名（master 重命名为 main）。本地分支和远程分支名称不同时，可以通过该命令来同步分支名称</li><li><code>git remote -v</code>：查看本地仓库关联的远程仓库</li><li><code>git remote remove origin</code>：删除关联的远程仓库</li><li><code>git remote add origin xxx</code>：关联远程仓库</li><li><code>git pull origin master --allow-unrelated-histories</code>：允许不相关历史提交，并强制合并。执行 Git 命令报错<code>fatal: refusing to merge unrelated histories</code>时使用，然后再解决冲突。</li><li><code>git stash</code>：将当前分支的修改暂存起来。之后使用<code>git stash pop</code>命令可以将暂存的内容恢复。<strong>适用场景：开发过程中，需要临时切换分支。</strong></li></ul><h2 id="项目开发中的-git-规范" tabindex="-1"><a class="header-anchor" href="#项目开发中的-git-规范"><span>项目开发中的 Git 规范</span></a></h2><h3 id="git-commit-提交信息规范" tabindex="-1"><a class="header-anchor" href="#git-commit-提交信息规范"><span>git commit 提交信息规范</span></a></h3><p><strong>常用：</strong></p><ul><li>feat：新增功能</li><li>fix：bug 修复</li><li>refactor：重构代码（既没有新增功能，也没有修复 bug）</li><li>docs：文档更新</li><li>test：新增测试用例或是更新现有测试</li><li>perf：性能, 体验优化</li><li>revert：回滚某个更早之前的提交</li></ul><p><strong>不常用（相对来说使用没那么频繁）：</strong></p><ul><li>style：不影响程序逻辑的代码修改（修改空白字符，格式缩进等）</li><li>ci：主要目的是修改项目继续集成流程（Jenkins，GitLab CI 等）的提交</li><li>chore：不属于以上类型的其他类型，比如构建流程, 依赖管理</li></ul><h3 id="代码提交流程" tabindex="-1"><a class="header-anchor" href="#代码提交流程"><span>代码提交流程</span></a></h3><figure><img src="https://s2.loli.net/2023/09/05/o64sHE2Jq71ZCMI.png" alt="代码提交流程.png" tabindex="0" loading="lazy"><figcaption>代码提交流程.png</figcaption></figure>',10)]))}const s=t(a,[["render",n],["__file","git.html.vue"]]),g=JSON.parse(`{"path":"/backend/tools/git.html","title":"Git","lang":"zh-CN","frontmatter":{"title":"Git","date":"2023-09-05T00:00:00.000Z","author":"Cleaner","categories":["工具"],"tags":["Git"],"description":"Git 常用命令 git add：代码提交到本地暂存区 git commit -m ''：代码提交到本地仓库 git push：代码提交到远程仓库 git pull：拉取远程仓库代码到本地 git clone ：克隆远程仓库代码到本地 git branch -m master main：本地代码分支重命名（master 重命名为 main）。本地分支和...","head":[["meta",{"property":"og:url","content":"https://cleaner.love/backend/tools/git.html"}],["meta",{"property":"og:site_name","content":"Cleaner"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"Git 常用命令 git add：代码提交到本地暂存区 git commit -m ''：代码提交到本地仓库 git push：代码提交到远程仓库 git pull：拉取远程仓库代码到本地 git clone ：克隆远程仓库代码到本地 git branch -m master main：本地代码分支重命名（master 重命名为 main）。本地分支和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s2.loli.net/2023/09/05/o64sHE2Jq71ZCMI.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-25T07:30:06.000Z"}],["meta",{"property":"article:author","content":"Cleaner"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-25T07:30:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"https://s2.loli.net/2023/09/05/o64sHE2Jq71ZCMI.png\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-25T07:30:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Cleaner\\"}]}"]]},"headers":[{"level":2,"title":"Git 常用命令","slug":"git-常用命令","link":"#git-常用命令","children":[]},{"level":2,"title":"项目开发中的 Git 规范","slug":"项目开发中的-git-规范","link":"#项目开发中的-git-规范","children":[{"level":3,"title":"git commit  提交信息规范","slug":"git-commit-提交信息规范","link":"#git-commit-提交信息规范","children":[]},{"level":3,"title":"代码提交流程","slug":"代码提交流程","link":"#代码提交流程","children":[]}]}],"git":{"createdTime":1742887806000,"updatedTime":1742887806000,"contributors":[{"name":"Cleaner","username":"Cleaner","email":"1414984960@qq.com","commits":1,"url":"https://github.com/Cleaner"}]},"readingTime":{"minutes":1.48,"words":445},"filePathRelative":"backend/tools/git.md","localizedDate":"2023年9月5日","excerpt":"<h2>Git 常用命令</h2>\\n<ul>\\n<li><code>git add</code>：代码提交到本地暂存区</li>\\n<li><code>git commit -m  ''</code>：代码提交到本地仓库</li>\\n<li><code>git push</code>：代码提交到远程仓库</li>\\n<li><code>git pull</code>：拉取远程仓库代码到本地</li>\\n<li><code>git clone</code> ：克隆远程仓库代码到本地</li>\\n<li><code>git branch -m master main</code>：本地代码分支重命名（master 重命名为 main）。本地分支和远程分支名称不同时，可以通过该命令来同步分支名称</li>\\n<li><code>git remote -v</code>：查看本地仓库关联的远程仓库</li>\\n<li><code>git remote remove origin</code>：删除关联的远程仓库</li>\\n<li><code>git remote add origin xxx</code>：关联远程仓库</li>\\n<li><code>git pull origin master --allow-unrelated-histories</code>：允许不相关历史提交，并强制合并。执行 Git 命令报错<code>fatal: refusing to merge unrelated histories</code>时使用，然后再解决冲突。</li>\\n<li><code>git stash</code>：将当前分支的修改暂存起来。之后使用<code>git stash pop</code>命令可以将暂存的内容恢复。<strong>适用场景：开发过程中，需要临时切换分支。</strong></li>\\n</ul>","autoDesc":true}`);export{s as comp,g as data};
